import shlex
import argparse

class Parser(argparse.ArgumentParser):

    def __init__(self, prog=None):
        self.printf = None
        self.exited = False
        argparse.ArgumentParser.__init__(self, prog=prog)

    def exit(self, *args, **kwargs):
        # yea....  newp.
        self.exited = True

    def _print_message(self, text, fd=None):

        if self.printf is None:
            return

        for line in text.split('\n'):
            self.printf(line)

class Cmd:

    name = 'cmd'
    brief = 'A one line description of the command.'

    def __init__(self, text):
        self.opts = None
        self.text = text
        self.argv = self.getCmdArgv()
        self.pars = self.getArgParser()

    def getCmdArgv(self):
        return shlex.split(self.text)

    def getArgParser(self):
        return Parser(prog=self.name)

    def reqValidOpts(self, snap):
        self.pars.printf = snap.printf
        self.opts = self.pars.parse_args(self.argv)
        return self.pars.exited

    def runStormCmd(self, snap, genr):
        yield from genr

class HelpCmd(Cmd):

    name = 'help'
    brief = 'List commands and show help output for them.'

    def getArgParser(self):
        pars = Cmd.getArgParser(self)
        pars.add_argument('command', nargs='?', help='Show the help output for a given command.')
        return pars

    def runStormCmd(self, snap, genr):

        yield from genr

        if not self.opts.command:
            for name, ctor in sorted(snap.core.getStormCmds()):
                snap.printf('%.20s: %s' % (name, ctor.brief))

class LimitCmd(Cmd):

    name = 'limit'

    brief = 'Limit the number of nodes generated by the query.'

    def getArgParser(self):
        pars = Cmd.getArgParser(self)
        pars.add_argument('count', type=int, help='The maximum number of nodes to yield.')
        return pars

    def runStormCmd(self, snap, genr):

        count = 0

        for item in genr:

            yield item

            count += 1
            if count >= self.opts.count:
                snap.printf(f'limit reached: {self.opts.count}')
                break
